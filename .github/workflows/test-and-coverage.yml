name: Test and Coverage

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          cd grimoire-runner
          pip install -e ".[dev]"
        shell: bash

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          cd grimoire-runner
          echo "::group::🧪 Running Tests"

          # Run tests and capture results
          if python -m pytest tests/ \
            --cov=grimoire_runner \
            --cov-report=term-missing \
            --cov-report=html \
            --cov-report=xml \
            --cov-branch \
            --tb=short \
            --quiet \
            --disable-warnings; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed - check details above"
            exit 1
          fi
          echo "::endgroup::"
        shell: bash

      - name: Install codecov for local reporting
        run: |
          source .venv/bin/activate
          pip install codecov
        shell: bash

      - name: Generate Codecov Analysis
        run: |
          source .venv/bin/activate
          echo "## Codecov Local Analysis" >> coverage_analysis.md
          echo "Using codecov CLI for enhanced local coverage analysis:" >> coverage_analysis.md
          echo "```" >> coverage_analysis.md
          codecov --file grimoire-runner/coverage.xml --dump --verbose 2>&1 | head -200 >> coverage_analysis.md || echo "Codecov analysis completed" >> coverage_analysis.md
          echo "```" >> coverage_analysis.md

          # Add badge
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            COLOR="green"
          elif (( $(echo "$COVERAGE >= 40" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$COVERAGE >= 20" | bc -l) )); then
            COLOR="orange"
          else
            COLOR="red"
          fi

          echo "![Coverage](https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 **HTML Coverage Report**: Available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: Coverage analysis and recommendations
        run: |
          source .venv/bin/activate
          cd grimoire-runner
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run our analysis script and capture key metrics
          python ../analyze_coverage.py > analysis_output.txt 2>&1 || true

          # Extract priority areas from analysis
          echo "#### Priority Areas for Testing:" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          grep -A 10 "Priority Areas for Testing:" analysis_output.txt | tail -n +2 | head -10 >> $GITHUB_STEP_SUMMARY || echo "Analysis data not available" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Full Analysis**: See 'Coverage analysis and recommendations' step in workflow logs" >> $GITHUB_STEP_SUMMARY

          # Generate additional codecov artifacts locally
          echo "🔧 Generating enhanced codecov artifacts..."
          codecov --file coverage.xml --dump --verbose > codecov_report.txt 2>&1 || echo "Codecov report generation failed"

          # Create a combined coverage summary
          echo "# Combined Coverage Summary" > coverage_summary.md
          echo "" >> coverage_summary.md
          echo "## Generated by Codecov (Local Analysis - No Upload)" >> coverage_summary.md
          echo "" >> coverage_summary.md
          cat codecov_report.txt >> coverage_summary.md 2>/dev/null || echo "Detailed analysis unavailable" >> coverage_summary.md
        shell: bash

      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-python-${{ matrix.python-version }}
          path: grimoire-runner/htmlcov/
          retention-days: 30

      - name: Upload codecov analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: codecov-analysis-python-${{ matrix.python-version }}
          path: |
            grimoire-runner/coverage_summary.md
            grimoire-runner/codecov_report.txt
            grimoire-runner/analysis_output.txt
          retention-days: 30

      - name: Upload coverage XML for future use
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml-python-${{ matrix.python-version }}
          path: grimoire-runner/coverage.xml
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { exec: execCommand } = require('@actions/exec');
            const fs = require('fs');

            try {
              // Get coverage percentage
              let coverageOutput = '';
              const options = {
                cwd: 'grimoire-runner',
                silent: true,
                listeners: {
                  stdout: (data) => {
                    coverageOutput += data.toString();
                  }
                }
              };
              
              await execCommand('python', ['-c', 'import coverage; cov = coverage.Coverage(); cov.load(); print(f"{cov.report():.1f}")'], options);
              const coverage = parseFloat(coverageOutput.trim());
              
              // Determine badge color
              let color = 'red';
              if (coverage >= 80) color = 'brightgreen';
              else if (coverage >= 60) color = 'green';
              else if (coverage >= 40) color = 'yellow';
              else if (coverage >= 20) color = 'orange';
              
              const badgeUrl = 'https://img.shields.io/badge/coverage-' + coverage + '%25-' + color;
              
              // Get codecov analysis summary
              let codecovSummary = '';
              try {
                const codecovOptions = {
                  cwd: 'grimoire-runner',
                  silent: true,
                  listeners: {
                    stdout: (data) => {
                      codecovSummary += data.toString();
                    }
                  }
                };
                await execCommand('codecov', ['--file', 'coverage.xml', '--dump', '--verbose'], codecovOptions);
              } catch (codecovError) {
                codecovSummary = 'Codecov analysis not available';
              }
              
              const comment = '## 📊 Coverage Report - Python ${{ matrix.python-version }}\n\n' +
                '![Coverage](' + badgeUrl + ')\n\n' +
                '**Overall Coverage:** ' + coverage + '%\n\n' +
                '### 🔧 Analysis Tools Used\n' +
                '- **Standard Coverage.py**: Line-by-line coverage measurement\n' +
                '- **Codecov Local Analysis**: Enhanced reporting and insights (no upload)\n' +
                '- **Custom Priority Analysis**: Project-specific recommendations\n\n' +
                '### 📁 Available Reports\n' +
                '- **HTML Coverage Report**: Download from workflow artifacts\n' +
                '- **Codecov Analysis**: Enhanced local analysis in artifacts\n' +
                '- **Priority Analysis**: Custom recommendations for testing focus\n\n' +
                '### 🎯 Next Steps\n' +
                'Check the workflow artifacts for detailed codecov analysis and HTML reports. No data was uploaded to external services - everything stays within GitHub.';

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              
            } catch (error) {
              console.log('Could not post coverage comment:', error);
              
              // Fallback to basic coverage comment
              try {
                let coverageOutput = '';
                const fallbackOptions = {
                  cwd: 'grimoire-runner',
                  silent: true,
                  listeners: {
                    stdout: (data) => {
                      coverageOutput += data.toString();
                    }
                  }
                };
                
                await execCommand('python', ['-c', 'import coverage; cov = coverage.Coverage(); cov.load(); print(f"{cov.report():.1f}")'], fallbackOptions);
                const coverage = parseFloat(coverageOutput.trim());
                
                let color = 'red';
                if (coverage >= 80) color = 'brightgreen';
                else if (coverage >= 60) color = 'green';
                else if (coverage >= 40) color = 'yellow';
                else if (coverage >= 20) color = 'orange';
                
                const badgeUrl = 'https://img.shields.io/badge/coverage-' + coverage + '%25-' + color;
                const fallbackComment = '## 📊 Coverage Report - Python ${{ matrix.python-version }}\n\n![Coverage](' + badgeUrl + ')\n\n**Overall Coverage:** ' + coverage + '%\n\n📁 **HTML Coverage Report**: Available in workflow artifacts';

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: fallbackComment
                });
              } catch (fallbackError) {
                console.log('Fallback coverage comment also failed:', fallbackError);
              }
            }

      - name: Coverage analysis
        run: |
          source .venv/bin/activate
          cd grimoire-runner
          python ../analyze_coverage.py || true
        shell: bash

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          cd grimoire-runner
          pip install -e ".[dev]"
        shell: bash

      - name: Run Ruff linting
        run: |
          source .venv/bin/activate
          cd grimoire-runner
          echo "::group::🔍 Ruff Linting"
          if ruff check src/ tests/ --output-format=github; then
            echo "✅ No linting issues found!"
          else
            echo "⚠️ Linting issues found - see annotations above"
          fi
          echo "::endgroup::"
        shell: bash
        continue-on-error: true # Don't fail CI on ruff warnings for now

      - name: Run Ruff formatting check
        run: |
          source .venv/bin/activate
          cd grimoire-runner
          echo "::group::🎨 Code Formatting"
          if ruff format --check src/ tests/; then
            echo "✅ Code formatting is correct!"
          else
            echo "❌ Code formatting issues found"
            exit 1
          fi
          echo "::endgroup::"
        shell: bash

      - name: Check import sorting
        run: |
          source .venv/bin/activate
          cd grimoire-runner
          echo "::group::📦 Import Sorting"
          if ruff check --select I src/ tests/; then
            echo "✅ Import sorting is correct!"
          else
            echo "⚠️ Import sorting issues found"
          fi
          echo "::endgroup::"
        shell: bash
        continue-on-error: true # Don't fail CI on import sorting warnings for now

      - name: Run mypy
        run: |
          source .venv/bin/activate
          cd grimoire-runner
          echo "::group::🔍 Type Checking"
          if mypy src/; then
            echo "✅ Type checking passed!"
          else
            echo "⚠️ Type checking issues found"
          fi
          echo "::endgroup::"
        shell: bash
        continue-on-error: true # Don't fail CI on mypy errors for now

  spec-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate spec files
        run: |
          # Check that all spec files are valid markdown
          find spec/ -name "*.md" -exec echo "Checking {}" \;

          # Check that system files are valid YAML
          find systems/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Validating YAML: $file"
            python -c "import yaml; yaml.safe_load(open('$file'))"
          done

      - name: Upload spec files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: specifications
          path: spec/
          retention-days: 30
